import React, { useState } from 'react';
import { Formik } from 'formik';
import { object } from 'yup';
import 'animate.css';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["children", "animate"],
    _excluded2 = ["validation"];

var FormikStepper = function FormikStepper(props) {
  var _child$props;

  var children = props.children,
      _props$animate = props.animate,
      animate = _props$animate === void 0 ? true : _props$animate,
      rest = _objectWithoutPropertiesLoose(props, _excluded);

  var getSteps = function getSteps() {
    return React.Children.toArray(children);
  };

  var totalSteps = getSteps().length;

  var _useState = useState(0),
      step = _useState[0],
      setStep = _useState[1];

  var _useState2 = useState({}),
      classes = _useState2[0],
      setClasses = _useState2[1];

  var child = Array.isArray(children) ? children[step] : children;
  var childIndex = Array.isArray(children) ? step : 0;
  var schema = object().shape(((_child$props = child.props) == null ? void 0 : _child$props.validation) || {});
  var transitions = {
    enterRight: "animate__animated animate__fadeInRight",
    enterLeft: "animate__animated animate__fadeInLeft",
    exitRight: "animate__animated animate__fadeOutRight",
    exitLeft: "animate__animated animate__fadeOutLeft"
  };

  var setActiveStep = function setActiveStep(next) {
    if (next === step) return;

    if (isInvalidStep(next)) {
      if (process.env.NODE_ENV !== 'production') {
        console.error(next + 1 + " is an invalid step");
      }

      return;
    }

    var classes = {};

    if (step < next) {
      //slide left
      classes[step] = transitions.exitLeft;
      classes[next] = transitions.enterRight;
    } else {
      //slide right
      classes[step] = transitions.exitRight;
      classes[next] = transitions.enterLeft;
    }

    setClasses(classes);
    setTimeout(function () {
      setStep(next);
    }, 200);
  };

  var isInvalidStep = function isInvalidStep(next) {
    return next < 0 || next >= totalSteps;
  };

  var isReactComponent = function isReactComponent(child) {
    var type = child.type;
    return typeof type === 'function' || typeof type === 'object';
  };

  var followingComponentsRequireValidation = function followingComponentsRequireValidation() {
    var components = getSteps().splice(step + 1, totalSteps);
    return components.some(function (comp) {
      var _comp$props;

      if ((_comp$props = comp.props) != null && _comp$props.validation) {
        return true;
      }

      return false;
    });
  };

  var isEmpty = function isEmpty(obj) {
    return Object.keys(obj).length === 0;
  }; // remove validation from props


  var _child$props2 = child.props,
      childProps = _objectWithoutPropertiesLoose(_child$props2, _excluded2);

  var filteredChild = _extends({}, child, {
    props: childProps
  });

  return React.createElement(Formik, Object.assign({}, rest, {
    validationSchema: schema
  }), function (_ref) {
    var validateForm = _ref.validateForm;
    return React.createElement(Step, {
      transitions: Boolean(animate) ? classes[childIndex] : ''
    }, isReactComponent(child) ? React.cloneElement(filteredChild, {
      currentStep: step + 1,
      totalSteps: totalSteps,
      nextStep: function nextStep() {
        validateForm().then(function (errors) {
          if (isEmpty(errors)) {
            setActiveStep(step + 1);
          }
        });
      },
      previousStep: function previousStep() {
        return setActiveStep(step - 1);
      },
      firstStep: function firstStep() {
        return setActiveStep(0);
      },
      goToStep: function goToStep(next) {
        return setActiveStep(next - 1);
      },
      lastStep: function lastStep() {
        if (followingComponentsRequireValidation()) {
          if (process.env.NODE_ENV !== 'production') {
            console.error('Following components require validation');
          }
        } else {
          validateForm().then(function (errors) {
            if (isEmpty(errors)) {
              setActiveStep(totalSteps - 1);
            }
          });
        }
      }
    }) : child);
  });
};

var Step = function Step(_ref2) {
  var children = _ref2.children,
      transitions = _ref2.transitions;
  return React.createElement("div", {
    className: transitions
  }, children);
};

export default FormikStepper;
//# sourceMappingURL=react-formik-stepper.esm.js.map
